# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

parameters:
  - name: artifactName
    type: string
    default: spring-boot-0.0.1-SNAPSHOT

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    cat << EOF > Dockerfile
    FROM maven as builder
    WORKDIR /tmp/web
    COPY web/pom.xml .
    RUN mvn dependency:go-offline -B
    COPY web/src ./src
    RUN mvn clean install

    FROM openjdk:8-jdk-slim
    WORKDIR /tmp/demo
    COPY --from=builder /tmp/web/target /tmp/demo
    CMD ["java","-jar","./${{parameters.artifactName}}"]
    EOF
    docker network create $(Build.DefinitionName)
  displayName: Write Dockerfile
 
# - task: Docker@2
#   displayName: Build image
#   inputs:
#     containerRegistry: 'docker-hub'
#     repository: '$(dockerImage)'
#     command: 'build'
#     Dockerfile: '**/Dockerfile'

- task: Docker@2
  inputs:
    containerRegistry: 'docker-hub'
    repository: '$(dokerImage)'
    command: 'run'
    arguments: '-d --rm --name=web -p 8080:8080 --network=$(Build.DefinitionName) $(dockerImage):39'
  displayName: Run Web container

- script: |
    ls $(System.DefaultWorkingDirectory)
    ls $(System.DefaultWorkingDirectory)/robot

- task: Docker@2
  inputs:
    containerRegistry: 'docker-hub'
    repository: supakarn/robot:root
    command: 'run'
    arguments: '--network=$(Build.DefinitionName) --rm -e ROBOT_OPTIONS="-x outputx.xml" -v $(System.DefaultWorkingDirectory)/robot/tests:/opt/robotframework/tests:Z -v $(System.DefaultWorkingDirectory)/robot/reports:/opt/robotframework/reports:Z -e BROWSER=chrome -e URL=http://web:8080 supakarn/robot:root'
  displayName: Test Image

- script: |
    ls $(System.DefaultWorkingDirectory)/robot/reports
    ls $(System.DefaultWorkingDirectory)/robot

- task: PublishTestResults@2
  displayName: 'Publish Test Results **\output-az.xml'
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/*'
    searchFolder: '$(System.DefaultWorkingDirectory)/robot/reports'
    failTaskOnFailedTests: true
    testRunTitle: '$(Build.DefinitionName) $(Build.BuildId)'
  condition: succeededOrFailed()

- task: Docker@2
  displayName: Push image to Dockerhub
  inputs:
    containerRegistry: 'docker-hub'
    repository: '$(dockerImage)'
    command: 'push'

