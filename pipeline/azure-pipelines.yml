# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

parameters:
  - name: artifactName
    type: string
    default: spring-boot-0.0.1-SNAPSHOT.jar

  - name: imageRegistry
    default: "devsecops-ACR"
    values:
      - "docker-hub"
      - "devsecops-ACR"
  
  - name: imageName
    type: string
    default: az-devops-test

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

# - script echo ${{parameters.imageRegistry}}
- script: ls

- task: WhiteSource@20
  inputs:
    cwd: '$(System.DefaultWorkingDirectory)'
    projectName: '$(Build.DefinitionName)_$(Build.BuildId)'

- script: |
    cat << EOF > Dockerfile
    FROM maven as builder
    WORKDIR /tmp/web
    COPY web/pom.xml .
    RUN mvn dependency:go-offline -B
    COPY web/src ./src
    RUN mvn clean install

    FROM openjdk:8-jdk-slim
    WORKDIR /tmp/demo
    COPY --from=builder /tmp/web/target /tmp/demo
    CMD ["java","-jar","./${{parameters.artifactName}}"]
    EOF
  displayName: Write Dockerfile

- task: Docker@2
  displayName: Build image
  inputs:
    containerRegistry: '${{parameters.imageRegistry}}'
    repository: '${{parameters.imageName}}'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
    tags: |
      latest
      $(Build.BuildId)
